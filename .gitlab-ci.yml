---
include:
  - project: 'renovate-bot/renovate-runner'
    file: '/templates/renovate.gitlab-ci.yml'

stages:
  - dependencies
  - test

.python-job:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      changes:
        - custom_components/energa_my_meter/**/*
        - tests/**/*
        - .gitlab-ci.yml
        - .pylintrc
        - uv.lock
        - pyproject.toml
  variables:
    UV_LINK_MODE: copy
  before_script:
    - pip install uv
    - uv pip install --system -r ./pyproject.toml --extra dev
  cache:
    - key:
        prefix: python
        files:
          - uv.lock
      paths:
        - ${CI_PROJECT_DIR}/.venv

renovate:
  stage: dependencies
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
  variables:
    RENOVATE_EXTRA_FLAGS: ${CI_PROJECT_PATH}
  script:
    - renovate $RENOVATE_EXTRA_FLAGS

lint:
  image: python:3.12.7
  stage: test
  needs: []
  extends:
    - .python-job
  variables:
    DIRECTORIES_TO_SCAN: custom_components/energa_my_meter #tests
    MINIMUM_SCORE: '8'
  script:
    - mkdir reports
    - uv run -- pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter ${DIRECTORIES_TO_SCAN} > reports/codeclimate.json
    - uv run -- pylint --fail-under="${MINIMUM_SCORE}" ${DIRECTORIES_TO_SCAN}
  artifacts:
    reports:
      codequality: reports/codeclimate.json
    when: always

test:
  image: python:3.12.7
  stage: test
  needs: []
  extends:
    - .python-job
  variables:
    COVERAGE_REPORT_PATH: reports/coverage.report.xml
    COVERAGE_UNIT_TESTS_REPORT_PATH: reports/unit-tests.report.xml
    REQUIRED_COVERAGE_LEVEL: 60
  script:
    - uv run -- pytest --asyncio-mode=auto -vv --cov --junitxml=${COVERAGE_UNIT_TESTS_REPORT_PATH} --cov-report=xml:${COVERAGE_REPORT_PATH} --cov-fail-under=${REQUIRED_COVERAGE_LEVEL}
  coverage: '/Total coverage: \d+\.\d+%/'
  artifacts:
    when: always
    reports:
      junit: ${COVERAGE_UNIT_TESTS_REPORT_PATH}
      coverage_report:
        coverage_format: cobertura
        path: ${COVERAGE_REPORT_PATH}
